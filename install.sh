#!/bin/bash

# üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ KanBe –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
# üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–°, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_step() {
    echo -e "${BLUE}üîÑ [–®–ê–ì] $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

print_header() {
    echo -e "${PURPLE}üéØ === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ KanBe ===${NC}"
    echo ""
}

print_footer() {
    echo ""
    echo -e "${GREEN}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KanBe!${NC}"
}



# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
detect_platform() {
    print_header

    print_step "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã..."

    OS=$(uname -s)
    ARCH=$(uname -m)

    case $OS in
        "Darwin")
            PLATFORM="macos"
            print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ macOS"
            ;;
        "Linux")
            PLATFORM="linux"
            print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Linux"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Raspberry Pi
            if [[ -f /proc/device-tree/model ]] && grep -q "Raspberry Pi" /proc/device-tree/model 2>/dev/null; then
                PLATFORM="raspberry-pi"
                print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω Raspberry Pi"
            fi
            ;;
        *)
            print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OS"
            exit 1
            ;;
    esac

    case $ARCH in
        "arm64"|"aarch64")
            CPU_ARCH="arm64"
            print_info "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: ARM64"
            ;;
        "x86_64"|"amd64")
            CPU_ARCH="x86_64"
            print_info "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: x86_64"
            ;;
        "armv7l")
            CPU_ARCH="armv7l"
            print_info "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: ARMv7 (32-bit)"
            ;;
        *)
            print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"
            CPU_ARCH="unknown"
            ;;
    esac

    print_success "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: $PLATFORM ($CPU_ARCH)"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
install_nodejs() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v node &> /dev/null && command -v npm &> /dev/null; then
        NODE_VERSION=$(node --version 2>/dev/null)
        NPM_VERSION=$(npm --version 2>/dev/null)
        if [[ -n "$NODE_VERSION" && -n "$NPM_VERSION" ]]; then
            print_info "Node.js —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $NODE_VERSION"
            return 0
        fi
    fi

    case $PLATFORM in
        "macos")
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –Ω–∞ macOS —á–µ—Ä–µ–∑ Homebrew (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
            if command -v brew &> /dev/null; then
                print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —á–µ—Ä–µ–∑ Homebrew..."
                brew install node@18
                print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew"
            else
                print_warning "Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Homebrew –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
                read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Homebrew? (y/n): " INSTALL_BREW
                if [[ $INSTALL_BREW =~ ^[Yy]$ ]]; then
                    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                    brew install node@18
                    print_success "Homebrew –∏ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                else
                    print_error "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –≤—Ä—É—á–Ω—É—é: https://nodejs.org/"
                    exit 1
                fi
            fi
            ;;
        "linux"|"raspberry-pi")
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –Ω–∞ Linux —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if command -v apt-get &> /dev/null; then
                print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —á–µ—Ä–µ–∑ apt..."

                # –ü–æ–ø—ã—Ç–∫–∞ 1: –ß–µ—Ä–µ–∑ nodesource —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                local max_attempts=3
                local attempt=1
                local node_installed=false

                while [ $attempt -le $max_attempts ] && [ "$node_installed" = false ]; do
                    print_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $max_attempts..."

                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è nodesource
                    if curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - 2>/dev/null; then
                        print_info "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π nodesource –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

                        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        if timeout 300 sudo apt-get install -y nodejs 2>/dev/null; then
                            node_installed=true
                            print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ nodesource"
                            break
                        else
                            print_warning "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ nodesource –Ω–µ —É–¥–∞–ª–∞—Å—å (–ø–æ–ø—ã—Ç–∫–∞ $attempt)"
                        fi
                    else
                        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π nodesource (–ø–æ–ø—ã—Ç–∫–∞ $attempt)"
                    fi

                    if [ $attempt -lt $max_attempts ]; then
                        print_info "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
                        sleep 5
                    fi
                    ((attempt++))
                done

                # –ü–æ–ø—ã—Ç–∫–∞ 2: –ß–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Debian/Ubuntu
                if [ "$node_installed" = false ]; then
                    print_info "–ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Debian..."

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
                    sudo apt-get update

                    # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å nodejs –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                    if sudo apt-get install -y nodejs npm 2>/dev/null; then
                        node_installed=true
                        print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
                    else
                        print_warning "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å"
                    fi
                fi

                # –ü–æ–ø—ã—Ç–∫–∞ 3: –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
                if [ "$node_installed" = false ]; then
                    print_info "–ü—Ä–æ–±—É–µ–º —Ä—É—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É Node.js..."

                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    local arch="x64"
                    if [[ $(uname -m) == "aarch64" ]]; then
                        arch="arm64"
                    elif [[ $(uname -m) == "armv7l" ]]; then
                        arch="armv7l"
                    fi

                    local node_url="https://nodejs.org/dist/v18.20.8/node-v18.20.8-linux-${arch}.tar.xz"

                    if curl -L -o node.tar.xz "$node_url" 2>/dev/null && [ -f node.tar.xz ]; then
                        print_info "Node.js –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞..."
                        sudo mkdir -p /usr/local/lib/nodejs
                        sudo tar -xf node.tar.xz -C /usr/local/lib/nodejs --strip-components=1
                        sudo ln -sf /usr/local/lib/nodejs/bin/node /usr/local/bin/node
                        sudo ln -sf /usr/local/lib/nodejs/bin/npm /usr/local/bin/npm
                        sudo ln -sf /usr/local/lib/nodejs/bin/npx /usr/local/bin/npx
                        rm node.tar.xz

                        if command -v node &> /dev/null; then
                            node_installed=true
                            print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é"
                        fi
                    else
                        print_warning "–†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Node.js –Ω–µ —É–¥–∞–ª–∞—Å—å"
                    fi
                fi

                if [ "$node_installed" = false ]; then
                    print_error "–í—Å–µ –º–µ—Ç–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –Ω–µ —É–¥–∞–ª–∏—Å—å"
                    print_info "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:"
                    print_info "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
                    print_info "2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node.js –≤—Ä—É—á–Ω—É—é: https://nodejs.org/"
                    print_info "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
                    exit 1
                fi
            else
                print_error "–ù–µ –Ω–∞–π–¥–µ–Ω apt-get. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –≤—Ä—É—á–Ω—É—é"
                exit 1
            fi
            ;;
    esac

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v node &> /dev/null && command -v npm &> /dev/null; then
        print_success "Node.js –≤–µ—Ä—Å–∏—è: $(node --version)"
        print_success "NPM –≤–µ—Ä—Å–∏—è: $(npm --version)"
    else
        print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
install_dependencies() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è package.json
    if [ ! -f "package.json" ]; then
        print_error "–§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    case $PLATFORM in
        "macos")
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è macOS..."
            if [ "$CPU_ARCH" = "arm64" ]; then
                print_info "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Apple Silicon (ARM64)..."
                npm install --no-audit --no-fund --timeout=60000
            else
                npm install --no-audit --no-fund --timeout=60000
            fi
            ;;
        "raspberry-pi")
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Raspberry Pi (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ARMv7)..."
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Raspberry Pi 3
            export NODE_OPTIONS="--max-old-space-size=256"  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–æ 256MB
            npm install --no-audit --no-fund --timeout=120000 --legacy-peer-deps --production=false
            ;;
        "linux")
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Linux..."
            npm install --no-audit --no-fund --timeout=60000
            ;;
    esac

    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
build_native_modules() {
    print_step "–°–±–æ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π..."

    case $PLATFORM in
        "macos")
            if [ "$CPU_ARCH" = "arm64" ]; then
                print_info "–°–±–æ—Ä–∫–∞ –¥–ª—è Apple Silicon (ARM64)..."
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è better-sqlite3 –Ω–∞ Apple Silicon
                npm rebuild better-sqlite3 --build-from-source
                print_success "–ù–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è Apple Silicon"
            else
                npm rebuild
                print_success "–ù–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–æ–±—Ä–∞–Ω—ã"
            fi
            ;;
        "raspberry-pi"|"linux")
            print_info "–°–±–æ—Ä–∫–∞ –¥–ª—è ARM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã..."
            npm rebuild better-sqlite3
            print_success "–ù–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–æ–±—Ä–∞–Ω—ã"
            ;;
    esac
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup_database() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    mkdir -p data

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è drizzle-kit
    if [ ! -f "node_modules/.bin/drizzle-kit" ]; then
        print_error "drizzle-kit –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
        return 1
    fi

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    if command -v npm &> /dev/null; then
        print_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        local max_attempts=3
        local attempt=1

        while [ $attempt -le $max_attempts ]; do
            print_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $max_attempts..."

            if npm run db:push 2>&1; then
                print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                return 0
            else
                print_warning "–ü–æ–ø—ã—Ç–∫–∞ $attempt –Ω–µ —É–¥–∞–ª–∞—Å—å"
                if [ $attempt -lt $max_attempts ]; then
                    print_info "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
                    sleep 3
                fi
            fi
            ((attempt++))
        done

        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
        print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 'npm run db:push' –≤—Ä—É—á–Ω—É—é"
        return 1
    else
        print_warning "NPM –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        return 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
select_installation_type() {
    SINGLE_USER=true
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port_availability() {
    local port=$1
    local service_name=$2

    if command -v lsof &> /dev/null; then
        local process_info=$(lsof -i :$port 2>/dev/null)
        if [ $? -eq 0 ] && [ -n "$process_info" ]; then
            print_warning "–ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:"
            echo "$process_info" | head -n 2
            read -p "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç $port? (y/n): " KILL_PROCESS
            if [[ $KILL_PROCESS =~ ^[Yy]$ ]]; then
                local pid=$(echo "$process_info" | awk 'NR==2 {print $2}')
                if kill -9 $pid 2>/dev/null; then
                    print_success "–ü—Ä–æ—Ü–µ—Å—Å —É–±–∏—Ç (PID: $pid)"
                    sleep 2
                else
                    print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
                    return 1
                fi
            else
                print_info "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ø–æ—Ä—Ç–æ–º"
            fi
        fi
    elif command -v netstat &> /dev/null; then
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            print_warning "–ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º –ø–æ—Ä—Ç–æ–º? (y/n): " CONTINUE_ANYWAY
            if [[ ! $CONTINUE_ANYWAY =~ ^[Yy]$ ]]; then
                return 1
            fi
        fi
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ $port (lsof/netstat –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)"
    fi

    return 0
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    if command -v openssl &> /dev/null; then
        SESSION_SECRET=$(openssl rand -hex 32)
    else
        SESSION_SECRET="default-secret-$(date +%s)"
    fi
    print_info "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ–∫—Ä–µ—Ç —Å–µ—Å—Å–∏–∏"

    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏
    cat > .env << EOF
NODE_ENV=production
PORT=3000
SESSION_SECRET=$SESSION_SECRET
DATABASE_URL=./data/kanbe.db
DEV_PORT=3000
PLATFORM=$PLATFORM
CPU_ARCH=$CPU_ARCH
SINGLE_USER=$SINGLE_USER
EOF

    print_success "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build_application() {
    print_step "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."

    if command -v npm &> /dev/null; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ vite –ª–æ–∫–∞–ª—å–Ω–æ
        if [ -f "node_modules/.bin/vite" ]; then
            print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π vite –¥–ª—è —Å–±–æ—Ä–∫–∏..."
            npm run build
        else
            print_warning "–õ–æ–∫–∞–ª—å–Ω—ã–π vite –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π..."
            if command -v vite &> /dev/null; then
                npm run build
            else
                print_warning "Vite –Ω–µ –Ω–∞–π–¥–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ..."
                npm install --save-dev vite
                npm run build
            fi
        fi
        print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ"
    else
        print_warning "NPM –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏"
    fi
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
download_code() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ KanBe
    if [ -d ".git" ] && [ -f "package.json" ]; then
        print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π KanBe"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º remote URL
        if git remote get-url origin 2>/dev/null | grep -q "iwizard7/KanBe"; then
            print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ KanBe —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º..."
            case $PLATFORM in
                "macos")
                    if launchctl list | grep -q kanbe 2>/dev/null; then
                        launchctl stop com.kanbe.app 2>/dev/null || true
                        launchctl unload ~/Library/LaunchAgents/com.kanbe.app.plist 2>/dev/null || true
                        print_info "Launchd —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    fi
                    ;;
                "linux"|"raspberry-pi")
                    if command -v systemctl &> /dev/null && sudo systemctl is-active --quiet kanbe 2>/dev/null; then
                        sudo systemctl stop kanbe 2>/dev/null || true
                        print_info "Systemd —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    fi
                    ;;
            esac

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if [ -f "data/kanbe.db" ]; then
                print_info "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º..."
                cp data/kanbe.db data/kanbe.db.backup.$(date +%Y%m%d_%H%M%S)
            fi

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if git status --porcelain | grep -q .; then
                print_info "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
                git stash push -m "Auto-stash before update $(date)"
                STASHED=true
            fi

            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ç–æ–∫
            if git pull origin main; then
                print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω —Å –≤–µ—Ç–∫–∏ main"
            elif git pull origin master; then
                print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω —Å –≤–µ—Ç–∫–∏ master"
            else
                print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π"
                print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å git: git status"
                print_info "–í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–ª–∏ detached HEAD. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: git checkout main && git pull"
            fi

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            if [ "$STASHED" = true ]; then
                print_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
                if git stash pop 2>/dev/null; then
                    print_success "–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                else
                    print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã."
                    print_info "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å–ª–∏—è–Ω–∏—è."
                    print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'git status' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ 'git stash drop' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π."
                fi
            fi
        else
            print_info "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω, –Ω–æ remote URL –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è"
            print_info "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π –∫–æ–¥–∞"
        fi
        return 0
    fi

    # –ï—Å–ª–∏ package.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ—Ç .git, —Å—á–∏—Ç–∞–µ–º –∫–æ–¥ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º
    if [ -f "package.json" ]; then
        print_info "–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–±–µ–∑ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)"
        return 0
    fi

    print_step "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞..."

    if command -v git &> /dev/null; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ install.sh (—á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
        FILES=$(ls -A . 2>/dev/null | grep -v '^\.DS_Store$')
        if [ -z "$FILES" ] || [ "$FILES" = "install.sh" ]; then
            if [ -f "install.sh" ]; then
                print_info "–ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª install.sh, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞..."
                # –£–¥–∞–ª—è–µ–º install.sh –ø–µ—Ä–µ–¥ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                rm -f install.sh
            fi
            git clone https://github.com/iwizard7/KanBe.git .
            if [ $? -eq 0 ]; then
                print_success "–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω"
            else
                print_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞"
                exit 1
            fi
        else
            print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞—è. –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã:"
            ls -la . | grep -v '^\.DS_Store$'
            print_error "–û—á–∏—Å—Ç–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
            exit 1
        fi
    else
        print_error "Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ git –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∞"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."

    case $PLATFORM in
        "macos")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Xcode Command Line Tools –¥–ª—è macOS
            if ! command -v clang &> /dev/null; then
                print_warning "Xcode Command Line Tools –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Xcode Command Line Tools? (y/n): " INSTALL_XCODE
                if [[ $INSTALL_XCODE =~ ^[Yy]$ ]]; then
                    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xcode Command Line Tools..."
                    xcode-select --install
                    print_success "Xcode Command Line Tools —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                else
                    print_error "Xcode Command Line Tools –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Å–±–æ—Ä–∫–∏ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"
                    exit 1
                fi
            else
                print_success "Xcode Command Line Tools –Ω–∞–π–¥–µ–Ω—ã"
            fi
            ;;
        "linux"|"raspberry-pi")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ build-essential –¥–ª—è Linux
            if ! dpkg -l | grep -q build-essential; then
                print_warning "build-essential –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                if command -v apt-get &> /dev/null; then
                    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ build-essential..."
                    sudo apt-get update
                    sudo apt-get install -y build-essential
                    print_success "build-essential —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                else
                    print_error "–ù–µ –Ω–∞–π–¥–µ–Ω apt-get. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ build-essential –≤—Ä—É—á–Ω—É—é"
                    exit 1
                fi
            else
                print_success "build-essential –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
    esac
}



# –ó–∞–ø—Ä–æ—Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
select_installation_directory() {
    print_step "–í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."

    echo ""
    echo "=== –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ==="
    echo "üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    echo ""

    # –ó–∞–ø—Ä–æ—Å —Å y –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø—Ä–æ—Å—Ç–æ Enter)
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å KanBe –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (Y/n): " USE_CURRENT_DIR
    USE_CURRENT_DIR=${USE_CURRENT_DIR:-y}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é y –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ y –∏–ª–∏ n
    USE_CURRENT_DIR=$(echo "$USE_CURRENT_DIR" | tr '[:upper:]' '[:lower:]')

    while [[ "$USE_CURRENT_DIR" != "y" && "$USE_CURRENT_DIR" != "n" ]]; do
        print_warning "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ 'y' (–¥–∞) –∏–ª–∏ 'n' (–Ω–µ—Ç)"
        read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å KanBe –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (Y/n): " USE_CURRENT_DIR
        USE_CURRENT_DIR=${USE_CURRENT_DIR:-y}
        USE_CURRENT_DIR=$(echo "$USE_CURRENT_DIR" | tr '[:upper:]' '[:lower:]')
    done

    if [[ $USE_CURRENT_DIR == "n" ]]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ KanBe: " INSTALL_DIR

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if [ ! -d "$INSTALL_DIR" ]; then
            echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $INSTALL_DIR –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            read -p "–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (y/n): " CREATE_DIR
            CREATE_DIR=${CREATE_DIR:-y}
            CREATE_DIR=$(echo "$CREATE_DIR" | tr '[:upper:]' '[:lower:]')

            while [[ "$CREATE_DIR" != "y" && "$CREATE_DIR" != "n" ]]; do
                print_warning "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ 'y' (–¥–∞) –∏–ª–∏ 'n' (–Ω–µ—Ç)"
                read -p "–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (y/n): " CREATE_DIR
                CREATE_DIR=${CREATE_DIR:-y}
                CREATE_DIR=$(echo "$CREATE_DIR" | tr '[:upper:]' '[:lower:]')
            done

            if [[ $CREATE_DIR == "y" ]]; then
                if ! mkdir -p "$INSTALL_DIR"; then
                    print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $INSTALL_DIR"
                    exit 1
                fi
                print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $INSTALL_DIR —Å–æ–∑–¥–∞–Ω–∞"
            else
                print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                exit 1
            fi
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if [ ! -w "$INSTALL_DIR" ]; then
            print_error "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $INSTALL_DIR"
            exit 1
        fi

        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if ! cd "$INSTALL_DIR"; then
            print_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $INSTALL_DIR"
            exit 1
        fi

        print_success "KanBe –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: $(pwd)"
    else
        print_success "KanBe –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $(pwd)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
validate_email() {
    local email=$1
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email —Ñ–æ—Ä–º–∞—Ç–∞
    if [[ $email =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        return 0
    else
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è single user —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
create_first_user() {
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ single user —Ä–µ–∂–∏–º
    if [ "$SINGLE_USER" != "true" ]; then
        print_info "–ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (single user —Ä–µ–∂–∏–º)"
        return 0
    fi

    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."

    echo ""
    echo "=== –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ==="

    # –ó–∞–ø—Ä–æ—Å email —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    while true; do
        read -p "Email –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " ADMIN_EMAIL
        if [ -z "$ADMIN_EMAIL" ]; then
            print_error "Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            continue
        fi
        if validate_email "$ADMIN_EMAIL"; then
            break
        else
            print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü—Ä–∏–º–µ—Ä: admin@example.com"
        fi
    done

    # –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    while true; do
        read -s -p "–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " ADMIN_PASSWORD
        echo ""
        if [ -z "$ADMIN_PASSWORD" ]; then
            print_error "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            continue
        fi
        if [ ${#ADMIN_PASSWORD} -lt 6 ]; then
            print_error "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            continue
        fi
        break
    done

    print_success "Email –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç—ã"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    if [ ! -f "data/kanbe.db" ]; then
        print_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
        return 1
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cat > create_admin.js << 'EOF'
import Database from 'better-sqlite3';
import { drizzle } from 'drizzle-orm/better-sqlite3';
import * as schema from './shared/schema.js';
import { eq } from 'drizzle-orm';
import bcrypt from 'bcrypt';

console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

const sqlite = new Database('./data/kanbe.db');
const db = drizzle({ client: sqlite, schema });

async function createAdmin() {
    const email = process.argv[2];
    const password = process.argv[3];

    if (!email || !password) {
        console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node create_admin.js <email> <password>');
        process.exit(1);
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        const tables = sqlite.pragma('table_list');
        const usersTableExists = tables.some(table => table.name === 'users');

        if (!usersTableExists) {
            console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π: npm run db:push');
            process.exit(1);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
        const existingUsers = await db
            .select()
            .from(schema.users)
            .where(eq(schema.users.email, email))
            .limit(1);

        const hashedPassword = await bcrypt.hash(password, 10);

        if (existingUsers.length > 0) {
            await db.update(schema.users).set({ password: hashedPassword }).where(eq(schema.users.email, email));
            console.log('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
            console.log('üìß Email:', email);
            console.log('üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', existingUsers[0].id);
            return;
        }

        const [user] = await db
            .insert(schema.users)
            .values({
                email,
                password: hashedPassword,
                firstName: 'Admin',
                lastName: 'User',
            })
            .returning();

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('üìß Email:', email);
        console.log('üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        process.exit(1);
    } finally {
        sqlite.close();
    }
}

createAdmin();
EOF

    # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º –∫ node_modules
    if [ -f "create_admin.js" ]; then
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π tsx –∏–∑ node_modules –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ
        ./node_modules/.bin/tsx create_admin.js "$ADMIN_EMAIL" "$ADMIN_PASSWORD"
        rm -f create_admin.js
        print_success "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: $ADMIN_EMAIL"
    else
        print_error "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª create_admin.js –Ω–µ —Å–æ–∑–¥–∞–Ω"
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd service —Ñ–∞–π–ª–∞
create_systemd_service() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ systemd service —Ñ–∞–π–ª–∞..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ Linux —Å systemd
    if [ "$PLATFORM" != "linux" ] && [ "$PLATFORM" != "raspberry-pi" ]; then
        print_info "Systemd service –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ $PLATFORM"
        return 0
    fi

    if ! command -v systemctl &> /dev/null; then
        print_warning "systemctl –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è systemd service"
        return 0
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ service —Ñ–∞–π–ª–∞
    SERVICE_FILE="/etc/systemd/system/kanbe.service"
    WORKING_DIR="$(pwd)"
    EXEC_START="$WORKING_DIR/node_modules/.bin/tsx $WORKING_DIR/server/index.ts"

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Raspberry Pi
    if [ "$PLATFORM" = "raspberry-pi" ]; then
        sudo tee $SERVICE_FILE > /dev/null << EOF
[Unit]
Description=KanBe Kanban Application (Raspberry Pi Optimized)
After=network.target
Wants=network.target

[Service]
Type=simple
User=$USER
WorkingDirectory=$WORKING_DIR
ExecStart=$EXEC_START
Restart=always
RestartSec=15
Environment=NODE_ENV=production
Environment=PORT=3000
Environment=DATABASE_URL=$WORKING_DIR/data/kanbe.db
Environment=SESSION_SECRET=$SESSION_SECRET

# Raspberry Pi –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
Environment=NODE_OPTIONS=--max-old-space-size=256 --optimize-for-size
Environment=UV_THREADPOOL_SIZE=2
Environment=SQLITE_BUSY_TIMEOUT=30000

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è Raspberry Pi 3
MemoryLimit=256M
CPUQuota=50%
Nice=10

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
NoNewPrivileges=yes
PrivateTmp=yes
ProtectSystem=strict
ReadWritePaths=$WORKING_DIR/data
ProtectHome=yes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
StandardOutput=journal
StandardError=journal
SyslogIdentifier=kanbe

[Install]
WantedBy=multi-user.target
EOF
    else
        sudo tee $SERVICE_FILE > /dev/null << EOF
[Unit]
Description=KanBe Kanban Application
After=network.target
Wants=network.target

[Service]
Type=simple
User=$USER
WorkingDirectory=$WORKING_DIR
ExecStart=$EXEC_START
Restart=always
RestartSec=10
Environment=NODE_ENV=production
Environment=PORT=3000
Environment=DATABASE_URL=$WORKING_DIR/data/kanbe.db
Environment=SESSION_SECRET=$SESSION_SECRET

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
NoNewPrivileges=yes
PrivateTmp=yes
ProtectSystem=strict
ReadWritePaths=$WORKING_DIR/data
ProtectHome=yes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
StandardOutput=journal
StandardError=journal
SyslogIdentifier=kanbe

[Install]
WantedBy=multi-user.target
EOF
    fi

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    sudo systemctl daemon-reload
    sudo systemctl enable kanbe

    print_success "Systemd service —Å–æ–∑–¥–∞–Ω: $SERVICE_FILE"
    print_info "–°–µ—Ä–≤–∏—Å –≤–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ launchd service —Ñ–∞–π–ª–∞ –¥–ª—è macOS
create_launchd_service() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ launchd service —Ñ–∞–π–ª–∞..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ macOS
    if [ "$PLATFORM" != "macos" ]; then
        print_info "Launchd service –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ $PLATFORM"
        return 0
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ plist —Ñ–∞–π–ª–∞
    PLIST_FILE="$HOME/Library/LaunchAgents/com.kanbe.app.plist"
    WORKING_DIR="$(pwd)"
    NODE_PATH="/usr/local/bin/node"
    SCRIPT_PATH="$WORKING_DIR/dist/index.js"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ node
    if ! command -v node &> /dev/null; then
        print_error "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
        return 1
    fi
    NODE_PATH=$(which node)

    mkdir -p "$HOME/Library/LaunchAgents"

    cat > "$PLIST_FILE" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.kanbe.app</string>
    <key>ProgramArguments</key>
    <array>
        <string>$NODE_PATH</string>
        <string>$SCRIPT_PATH</string>
    </array>
    <key>WorkingDirectory</key>
    <string>$WORKING_DIR</string>
    <key>EnvironmentVariables</key>
    <dict>
        <key>NODE_ENV</key>
        <string>production</string>
        <key>PORT</key>
        <string>3000</string>
        <key>DATABASE_URL</key>
        <string>$WORKING_DIR/data/kanbe.db</string>
        <key>SESSION_SECRET</key>
        <string>$SESSION_SECRET</string>
    </dict>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <dict>
        <key>SuccessfulExit</key>
        <false/>
    </dict>
    <key>StandardOutPath</key>
    <string>$WORKING_DIR/kanbe.log</string>
    <key>StandardErrorPath</key>
    <string>$WORKING_DIR/kanbe-error.log</string>
</dict>
</plist>
EOF

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    if launchctl bootstrap gui/$(id -u) "$PLIST_FILE"; then
        print_success "Launchd service —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω: $PLIST_FILE"
        print_info "–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω"
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å launchd —Å–µ—Ä–≤–∏—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é: launchctl bootstrap gui/$(id -u) $PLIST_FILE"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main() {
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    detect_platform

    # –í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    select_installation_directory

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
    download_code

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    PROJECT_DIR="$(pwd)"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    check_requirements

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    select_installation_type

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
    install_nodejs

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies

    # –°–±–æ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    build_native_modules

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    setup_database

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    create_config

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ single user —Ä–µ–∂–∏–º)
    create_first_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
    if [ ! -f "data/kanbe.db" ]; then
        print_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if command -v sqlite3 &> /dev/null; then
        TABLES_COUNT=$(sqlite3 data/kanbe.db "SELECT COUNT(*) FROM sqlite_master WHERE type='table';" 2>/dev/null || echo "0")
        if [ "$TABLES_COUNT" -eq 0 ]; then
            print_error "–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 'npm run db:push' –≤—Ä—É—á–Ω—É—é"
            exit 1
        fi
    else
        print_warning "sqlite3 –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü"
    fi

    # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    build_application

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    case $PLATFORM in
        "linux"|"raspberry-pi")
            create_systemd_service
            ;;
        "macos")
            create_launchd_service
            ;;
    esac

    print_footer

    echo ""
    echo -e "${CYAN}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ:${NC}"
    echo "   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: $PLATFORM"
    echo "   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $CPU_ARCH"
    echo "   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    echo "   –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $([ "$SINGLE_USER" = "true" ] && echo "–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" || echo "–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")"
    echo "   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $(pwd)/data/kanbe.db"
    echo ""
    echo -e "${GREEN}üöÄ KanBe –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!${NC}"
    echo ""

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–º
    case $PLATFORM in
        "linux"|"raspberry-pi")
            echo "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è systemd —Å–µ—Ä–≤–∏—Å–æ–º:"
            echo "  –ó–∞–ø—É—Å–∫: sudo systemctl start kanbe"
            echo "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: sudo systemctl stop kanbe"
            echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: sudo systemctl restart kanbe"
            echo "  –°—Ç–∞—Ç—É—Å: sudo systemctl status kanbe"
            echo "  –õ–æ–≥–∏: sudo journalctl -u kanbe -f"
            echo "  –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: sudo systemctl enable kanbe"
            ;;
        "macos")
            echo "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è launchd —Å–µ—Ä–≤–∏—Å–æ–º:"
            echo "  –ó–∞–ø—É—Å–∫: launchctl start com.kanbe.app"
            echo "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: launchctl stop com.kanbe.app && launchctl unload ~/Library/LaunchAgents/com.kanbe.app.plist"
            echo "  –°—Ç–∞—Ç—É—Å: launchctl list | grep kanbe"
            echo "  –õ–æ–≥–∏: tail -f kanbe.log"
            echo "  –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫: node dist/index.js"
            ;;
        *)
            echo "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (PM2/nohup):"
            echo "  –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: npm run status"
            echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: npm run restart"
            echo "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: npm run stop"
            echo "  –õ–æ–≥–∏: npm run logs"
            ;;
    esac

    echo ""
    echo "–ü–æ—Ä—Ç—ã:"
    echo "  API –∏ –§—Ä–æ–Ω—Ç–µ–Ω–¥: 3000"
    if [ "$SINGLE_USER" = "true" ] && [ -n "$ADMIN_EMAIL" ]; then
        echo "  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: $ADMIN_EMAIL"
    fi
    echo ""
    echo -e "${YELLOW}üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î: cp data/kanbe.db data/backup_$(date +%Y%m%d_%H%M%S).db"
    echo "  –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–º–µ—Ä–∞ –ë–î: du -h data/kanbe.db"

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
    echo ""
    echo -e "${BLUE}üîÑ –ó–∞–ø—É—Å–∫ KanBe —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    case $PLATFORM in
        "linux"|"raspberry-pi")
            if command -v systemctl &> /dev/null; then
                sudo systemctl start kanbe
                sleep 3
                if sudo systemctl is-active --quiet kanbe; then
                    print_success "KanBe –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ systemd —Å–µ—Ä–≤–∏—Å"
                    echo -e "${CYAN}üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3000${NC}"
                else
                    print_warning "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞, –ø—Ä–æ–±—É–µ–º PM2..."
                    if command -v pm2 &> /dev/null; then
                        npm run start:pm2
                        print_success "KanBe –∑–∞–ø—É—â–µ–Ω —Å PM2"
                    else
                        nohup npm run start > kanbe.log 2>&1 &
                        print_success "KanBe –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ"
                    fi
                fi
            fi
            ;;
        "macos")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            sleep 3
            if launchctl list | grep -q kanbe; then
                print_success "KanBe –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ launchd —Å–µ—Ä–≤–∏—Å"
                echo -e "${CYAN}üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3000${NC}"
            else
                print_warning "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ launchd —Å–µ—Ä–≤–∏—Å–∞, –ø—Ä–æ–±—É–µ–º PM2..."
                if command -v pm2 &> /dev/null; then
                    npm run start:pm2
                    print_success "KanBe –∑–∞–ø—É—â–µ–Ω —Å PM2"
                else
                    nohup npm run start > kanbe.log 2>&1 &
                    print_success "KanBe –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ"
                fi
            fi
            ;;
        *)
            # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            if command -v npm &> /dev/null; then
                echo -e "${CYAN}üåê –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É:${NC}"
                echo -e "${CYAN}   http://localhost:3000${NC}"
                echo ""
                echo -e "${YELLOW}üí° –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
                echo -e "${YELLOW}   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: npm run stop${NC}"
                echo -e "${YELLOW}   –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run restart${NC}"
                echo -e "${YELLOW}   –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: npm run status${NC}"
                echo ""
                echo -e "${PURPLE}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! KanBe –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ.${NC}"
                echo ""

                # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ —Å –ø–æ–º–æ—â—å—é PM2
                if command -v pm2 &> /dev/null; then
                    print_info "–ó–∞–ø—É—Å–∫ —Å PM2 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)..."
                    npm run start:pm2
                    print_success "KanBe –∑–∞–ø—É—â–µ–Ω —Å PM2"
                else
                    print_warning "PM2 –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ —Å nohup..."
                    nohup npm run start > kanbe.log 2>&1 &
                    SERVER_PID=$!
                    echo $SERVER_PID > kanbe.pid
                    sleep 3
                    if kill -0 $SERVER_PID 2>/dev/null; then
                        print_success "KanBe –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (PID: $SERVER_PID)"
                    else
                        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
                        cat kanbe.log
                    fi
                fi
            else
                echo -e "${YELLOW}‚ö†Ô∏è  NPM –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π: npm run start${NC}"
            fi
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
