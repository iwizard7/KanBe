#!/bin/bash

# üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ KanBe –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
# üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–°, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_step() {
    echo -e "${BLUE}üîÑ [–®–ê–ì] $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

print_header() {
    echo -e "${PURPLE}üéØ === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ KanBe ===${NC}"
    echo ""
}

print_footer() {
    echo ""
    echo -e "${GREEN}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KanBe!${NC}"
}



# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
detect_platform() {
    print_header

    print_step "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã..."

    OS=$(uname -s)
    ARCH=$(uname -m)

    case $OS in
        "Darwin")
            PLATFORM="macos"
            print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ macOS"
            ;;
        "Linux")
            PLATFORM="linux"
            print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Linux"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Raspberry Pi
            if [[ -f /proc/device-tree/model ]] && grep -q "Raspberry Pi" /proc/device-tree/model 2>/dev/null; then
                PLATFORM="raspberry-pi"
                print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω Raspberry Pi"
            fi
            ;;
        *)
            print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OS"
            exit 1
            ;;
    esac

    case $ARCH in
        "arm64"|"aarch64")
            CPU_ARCH="arm64"
            print_info "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: ARM64"
            ;;
        "x86_64"|"amd64")
            CPU_ARCH="x86_64"
            print_info "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: x86_64"
            ;;
        "armv7l")
            CPU_ARCH="armv7l"
            print_info "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: ARMv7 (32-bit)"
            ;;
        *)
            print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"
            CPU_ARCH="unknown"
            ;;
    esac

    print_success "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: $PLATFORM ($CPU_ARCH)"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
install_nodejs() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v node &> /dev/null && command -v npm &> /dev/null; then
        NODE_VERSION=$(node --version 2>/dev/null)
        NPM_VERSION=$(npm --version 2>/dev/null)
        if [[ -n "$NODE_VERSION" && -n "$NPM_VERSION" ]]; then
            print_info "Node.js —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $NODE_VERSION"
            return 0
        fi
    fi

    case $PLATFORM in
        "macos")
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –Ω–∞ macOS —á–µ—Ä–µ–∑ Homebrew (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
            if command -v brew &> /dev/null; then
                print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —á–µ—Ä–µ–∑ Homebrew..."
                brew install node@18
                print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew"
            else
                print_warning "Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Homebrew –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
                read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Homebrew? (y/n): " INSTALL_BREW
                if [[ $INSTALL_BREW =~ ^[Yy]$ ]]; then
                    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                    brew install node@18
                    print_success "Homebrew –∏ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                else
                    print_error "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –≤—Ä—É—á–Ω—É—é: https://nodejs.org/"
                    exit 1
                fi
            fi
            ;;
        "linux"|"raspberry-pi")
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –Ω–∞ Linux
            if command -v apt-get &> /dev/null; then
                print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —á–µ—Ä–µ–∑ apt..."
                curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                sudo apt-get install -y nodejs
                print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            else
                print_error "–ù–µ –Ω–∞–π–¥–µ–Ω apt-get. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –≤—Ä—É—á–Ω—É—é"
                exit 1
            fi
            ;;
    esac

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v node &> /dev/null && command -v npm &> /dev/null; then
        print_success "Node.js –≤–µ—Ä—Å–∏—è: $(node --version)"
        print_success "NPM –≤–µ—Ä—Å–∏—è: $(npm --version)"
    else
        print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
install_dependencies() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è package.json
    if [ ! -f "package.json" ]; then
        print_error "–§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    case $PLATFORM in
        "macos")
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è macOS..."
            if [ "$CPU_ARCH" = "arm64" ]; then
                print_info "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Apple Silicon (ARM64)..."
                npm config set python python3
                npm install --no-audit --no-fund --timeout=60000
            else
                npm install --no-audit --no-fund --timeout=60000
            fi
            ;;
        "raspberry-pi")
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Raspberry Pi..."
            npm install --no-audit --no-fund --timeout=60000 --legacy-peer-deps
            ;;
        "linux")
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Linux..."
            npm install --no-audit --no-fund --timeout=60000
            ;;
    esac

    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
build_native_modules() {
    print_step "–°–±–æ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π..."

    case $PLATFORM in
        "macos")
            if [ "$CPU_ARCH" = "arm64" ]; then
                print_info "–°–±–æ—Ä–∫–∞ –¥–ª—è Apple Silicon (ARM64)..."
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è better-sqlite3 –Ω–∞ Apple Silicon
                npm rebuild better-sqlite3 --build-from-source
                print_success "–ù–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è Apple Silicon"
            else
                npm rebuild
                print_success "–ù–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–æ–±—Ä–∞–Ω—ã"
            fi
            ;;
        "raspberry-pi"|"linux")
            print_info "–°–±–æ—Ä–∫–∞ –¥–ª—è ARM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã..."
            npm rebuild better-sqlite3
            print_success "–ù–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–æ–±—Ä–∞–Ω—ã"
            ;;
    esac
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup_database() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    mkdir -p data

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    if command -v npm &> /dev/null; then
        npm run db:push
        print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    else
        print_warning "NPM –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    fi
}

# –ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
select_installation_type() {
    print_step "–í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."

    echo ""
    echo "=== –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ==="
    echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
    echo "1) –î–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ UI)"
    echo "2) –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ UI)"
    echo ""
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1 –∏–ª–∏ 2): " INSTALL_TYPE

    case $INSTALL_TYPE in
        "1")
            SINGLE_USER=true
            print_info "–í—ã–±—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            print_info "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ UI –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞"
            ;;
        "2")
            SINGLE_USER=false
            print_info "–í—ã–±—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            print_info "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ UI –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞"
            ;;
        *)
            print_warning "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            SINGLE_USER=false
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port_availability() {
    local port=$1
    local service_name=$2

    if command -v lsof &> /dev/null; then
        local process_info=$(lsof -i :$port 2>/dev/null)
        if [ $? -eq 0 ] && [ -n "$process_info" ]; then
            print_warning "–ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:"
            echo "$process_info" | head -n 2
            read -p "–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç $port? (y/n): " KILL_PROCESS
            if [[ $KILL_PROCESS =~ ^[Yy]$ ]]; then
                local pid=$(echo "$process_info" | awk 'NR==2 {print $2}')
                if kill -9 $pid 2>/dev/null; then
                    print_success "–ü—Ä–æ—Ü–µ—Å—Å —É–±–∏—Ç (PID: $pid)"
                    sleep 2
                else
                    print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
                    return 1
                fi
            else
                print_info "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ø–æ—Ä—Ç–æ–º"
            fi
        fi
    elif command -v netstat &> /dev/null; then
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            print_warning "–ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º –ø–æ—Ä—Ç–æ–º? (y/n): " CONTINUE_ANYWAY
            if [[ ! $CONTINUE_ANYWAY =~ ^[Yy]$ ]]; then
                return 1
            fi
        fi
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ $port (lsof/netstat –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)"
    fi

    return 0
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–π
    read -p "–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç –¥–ª—è —Å–µ—Å—Å–∏–π (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): " SESSION_SECRET
    if [ -z "$SESSION_SECRET" ]; then
        if command -v openssl &> /dev/null; then
            SESSION_SECRET=$(openssl rand -hex 32)
        else
            SESSION_SECRET="default-secret-$(date +%s)"
        fi
        print_info "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ–∫—Ä–µ—Ç —Å–µ—Å—Å–∏–∏: $SESSION_SECRET"
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏
    cat > .env << EOF
NODE_ENV=production
PORT=5010
SESSION_SECRET=$SESSION_SECRET
DATABASE_URL=./data/kanbe.db
DEV_PORT=3000
PLATFORM=$PLATFORM
CPU_ARCH=$CPU_ARCH
SINGLE_USER=$SINGLE_USER
EOF

    print_success "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build_application() {
    print_step "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."

    if command -v npm &> /dev/null; then
        npm run build
        print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ"
    else
        print_warning "NPM –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏"
    fi
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
download_code() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ KanBe
    if [ -d ".git" ] && [ -f "package.json" ]; then
        print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π KanBe"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º remote URL
        if git remote get-url origin 2>/dev/null | grep -q "iwizard7/KanBe"; then
            print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
            git pull origin main || git pull origin master
            if [ $? -eq 0 ]; then
                print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω"
            else
                print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π"
            fi
        else
            print_info "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω, –Ω–æ remote URL –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è"
            print_info "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π –∫–æ–¥–∞"
        fi
        return 0
    fi

    # –ï—Å–ª–∏ package.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ—Ç .git, —Å—á–∏—Ç–∞–µ–º –∫–æ–¥ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º
    if [ -f "package.json" ]; then
        print_info "–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–±–µ–∑ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)"
        return 0
    fi

    print_step "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞..."

    if command -v git &> /dev/null; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ install.sh (—á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
        FILES=$(ls -A . 2>/dev/null | grep -v '^\.DS_Store$')
        if [ -z "$FILES" ] || [ "$FILES" = "install.sh" ]; then
            if [ -f "install.sh" ]; then
                print_info "–ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª install.sh, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞..."
                # –£–¥–∞–ª—è–µ–º install.sh –ø–µ—Ä–µ–¥ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                rm -f install.sh
            fi
            git clone https://github.com/iwizard7/KanBe.git .
            if [ $? -eq 0 ]; then
                print_success "–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω"
            else
                print_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞"
                exit 1
            fi
        else
            print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞—è. –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã:"
            ls -la . | grep -v '^\.DS_Store$'
            print_error "–û—á–∏—Å—Ç–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
            exit 1
        fi
    else
        print_error "Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ git –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∞"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."

    case $PLATFORM in
        "macos")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Xcode Command Line Tools –¥–ª—è macOS
            if ! command -v clang &> /dev/null; then
                print_warning "Xcode Command Line Tools –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Xcode Command Line Tools? (y/n): " INSTALL_XCODE
                if [[ $INSTALL_XCODE =~ ^[Yy]$ ]]; then
                    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xcode Command Line Tools..."
                    xcode-select --install
                    print_success "Xcode Command Line Tools —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                else
                    print_error "Xcode Command Line Tools –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Å–±–æ—Ä–∫–∏ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"
                    exit 1
                fi
            else
                print_success "Xcode Command Line Tools –Ω–∞–π–¥–µ–Ω—ã"
            fi
            ;;
        "linux"|"raspberry-pi")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ build-essential –¥–ª—è Linux
            if ! dpkg -l | grep -q build-essential; then
                print_warning "build-essential –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                if command -v apt-get &> /dev/null; then
                    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ build-essential..."
                    sudo apt-get update
                    sudo apt-get install -y build-essential
                    print_success "build-essential —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                else
                    print_error "–ù–µ –Ω–∞–π–¥–µ–Ω apt-get. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ build-essential –≤—Ä—É—á–Ω—É—é"
                    exit 1
                fi
            else
                print_success "build-essential –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
    esac
}



# –ó–∞–ø—Ä–æ—Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
select_installation_directory() {
    print_step "–í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."

    echo ""
    echo "=== –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ==="
    echo "üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    echo ""
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å KanBe –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (y/n): " USE_CURRENT_DIR

    if [[ $USE_CURRENT_DIR =~ ^[Nn]$ ]]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ KanBe: " INSTALL_DIR

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if [ ! -d "$INSTALL_DIR" ]; then
            echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $INSTALL_DIR –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            read -p "–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (y/n): " CREATE_DIR
            if [[ $CREATE_DIR =~ ^[Yy]$ ]]; then
                if ! mkdir -p "$INSTALL_DIR"; then
                    print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $INSTALL_DIR"
                    exit 1
                fi
                print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $INSTALL_DIR —Å–æ–∑–¥–∞–Ω–∞"
            else
                print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                exit 1
            fi
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if [ ! -w "$INSTALL_DIR" ]; then
            print_error "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $INSTALL_DIR"
            exit 1
        fi

        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if ! cd "$INSTALL_DIR"; then
            print_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $INSTALL_DIR"
            exit 1
        fi

        print_success "KanBe –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: $(pwd)"
    else
        print_success "KanBe –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $(pwd)"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è single user —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
create_first_user() {
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ single user —Ä–µ–∂–∏–º
    if [ "$SINGLE_USER" != "true" ]; then
        print_info "–ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–∂–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
        return 0
    fi

    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."

    echo ""
    echo "=== –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ==="
    read -p "Email –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " ADMIN_EMAIL
    read -s -p "–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " ADMIN_PASSWORD
    echo ""

    if [ -z "$ADMIN_EMAIL" ] || [ -z "$ADMIN_PASSWORD" ]; then
        print_warning "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è single user —Ä–µ–∂–∏–º–∞"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    if [ ! -f "kanbe.db" ]; then
        print_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
        return 1
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cat > create_admin.js << 'EOF'
import Database from 'better-sqlite3';
import { drizzle } from 'drizzle-orm/better-sqlite3';
import * as schema from './shared/schema.js';
import bcrypt from 'bcrypt';

console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

const sqlite = new Database('./kanbe.db');
const db = drizzle({ client: sqlite, schema });

async function createAdmin() {
    const email = process.argv[2];
    const password = process.argv[3];

    if (!email || !password) {
        console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node create_admin.js <email> <password>');
        process.exit(1);
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        const tables = sqlite.pragma('table_list');
        const usersTableExists = tables.some(table => table.name === 'users');

        if (!usersTableExists) {
            console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π: npm run db:push');
            process.exit(1);
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const [user] = await db
            .insert(schema.users)
            .values({
                email,
                password: hashedPassword,
                firstName: 'Admin',
                lastName: 'User',
            })
            .returning();

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('üìß Email:', email);
        console.log('üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        process.exit(1);
    } finally {
        sqlite.close();
    }
}

createAdmin();
EOF

    # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if [ -f "create_admin.js" ]; then
        npx tsx create_admin.js "$ADMIN_EMAIL" "$ADMIN_PASSWORD"
        rm -f create_admin.js
        print_success "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: $ADMIN_EMAIL"
    else
        print_error "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª create_admin.js –Ω–µ —Å–æ–∑–¥–∞–Ω"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main() {
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    detect_platform

    # –í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    select_installation_directory

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
    download_code

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    PROJECT_DIR="$(pwd)"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    check_requirements

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ–¥–∏–Ω/–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    select_installation_type

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
    install_nodejs

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies

    # –°–±–æ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    build_native_modules

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    setup_database

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    create_config

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ single user —Ä–µ–∂–∏–º)
    create_first_user

    # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    build_application

    print_footer

    echo ""
    echo -e "${CYAN}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ:${NC}"
    echo "   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: $PLATFORM"
    echo "   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $CPU_ARCH"
    echo "   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    echo "   –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $([ "$SINGLE_USER" = "true" ] && echo "–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" || echo "–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")"
    echo ""
    echo -e "${GREEN}üöÄ KanBe –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!${NC}"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:"
    echo "  –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: npm run dev (API) + npm run dev:client (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)"
    echo "  –ü—Ä–æ–¥–∞–∫—à–Ω: npm run start"
    echo ""
    echo "–ü–æ—Ä—Ç—ã:"
    echo "  API: 5010"
    echo "  –§—Ä–æ–Ω—Ç–µ–Ω–¥: 3000"
    if [ "$SINGLE_USER" = "true" ] && [ -n "$ADMIN_EMAIL" ]; then
        echo "  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: $ADMIN_EMAIL"
    fi

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    echo ""
    echo -e "${BLUE}üîÑ –ó–∞–ø—É—Å–∫ KanBe...${NC}"
    if command -v npm &> /dev/null; then
        echo -e "${CYAN}üåê –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É:${NC}"
        echo -e "${CYAN}   http://localhost:5010${NC}"
        echo ""
        echo -e "${YELLOW}üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${NC}"
        echo ""
        echo -e "${PURPLE}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...${NC}"
        echo ""

        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ foreground (–Ω–µ –≤ background)
        npm run start
    else
        echo -e "${YELLOW}‚ö†Ô∏è  NPM –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π: npm run start${NC}"
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
