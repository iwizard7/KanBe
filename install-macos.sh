#!/bin/bash

# üçé –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ KanBe –¥–ª—è macOS (Apple Silicon)
# üèóÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ M-—Å–µ—Ä–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–æ–π –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_step() {
    echo -e "${BLUE}üîÑ [–®–ê–ì] $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

print_header() {
    echo -e "${PURPLE}üçé === –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ KanBe –¥–ª—è macOS ===${NC}"
    echo ""
}

print_footer() {
    echo ""
    echo -e "${GREEN}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KanBe –Ω–∞ macOS!${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ macOS
detect_macos() {
    print_header

    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ macOS –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã..."

    if [[ "$OSTYPE" != "darwin"* ]]; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è macOS"
        echo "–¢–µ–∫—É—â–∞—è –û–°: $OSTYPE"
        exit 1
    fi

    ARCH=$(uname -m)
    case $ARCH in
        "arm64")
            print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω Apple Silicon (ARM64)"
            CPU_ARCH="arm64"
            ;;
        "x86_64")
            print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω Intel Mac (x86_64)"
            CPU_ARCH="x86_64"
            ;;
        *)
            print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"
            CPU_ARCH="unknown"
            ;;
    esac

    print_success "macOS $CPU_ARCH –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Xcode Command Line Tools
install_xcode_tools() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Xcode Command Line Tools..."

    if ! command -v clang &> /dev/null; then
        print_warning "Xcode Command Line Tools –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo -e "${YELLOW}üîß Xcode Command Line Tools –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Å–±–æ—Ä–∫–∏ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π${NC}"
        read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Xcode Command Line Tools –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): " INSTALL_XCODE
        if [[ $INSTALL_XCODE =~ ^[Yy]$ ]]; then
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xcode Command Line Tools..."
            xcode-select --install

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xcode Command Line Tools..."
            until command -v clang &> /dev/null; do
                sleep 2
            done

            print_success "Xcode Command Line Tools —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else
            print_error "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Xcode Command Line Tools –≤—Ä—É—á–Ω—É—é: xcode-select --install"
            exit 1
        fi
    else
        print_success "Xcode Command Line Tools –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew
install_homebrew() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Homebrew..."

    if ! command -v brew &> /dev/null; then
        print_warning "Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo -e "${CYAN}üç∫ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Homebrew –¥–ª—è –ª—É—á—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏${NC}"
        read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Homebrew? (y/n): " INSTALL_BREW
        if [[ $INSTALL_BREW =~ ^[Yy]$ ]]; then
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            if command -v brew &> /dev/null; then
                print_success "Homebrew —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Homebrew –≤ PATH –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                eval "$(/opt/homebrew/bin/brew shellenv)"
            else
                print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Homebrew"
                exit 1
            fi
        else
            print_warning "–ü—Ä–æ–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Homebrew. Node.js –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"
        fi
    else
        print_success "Homebrew –Ω–∞–π–¥–µ–Ω"
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew
        brew update
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —á–µ—Ä–µ–∑ Homebrew
install_nodejs_homebrew() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —á–µ—Ä–µ–∑ Homebrew..."

    if command -v brew &> /dev/null; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if command -v node &> /dev/null && command -v npm &> /dev/null; then
            NODE_VERSION=$(node --version 2>/dev/null)
            NPM_VERSION=$(npm --version 2>/dev/null)
            if [[ -n "$NODE_VERSION" && -n "$NPM_VERSION" ]]; then
                print_info "Node.js —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $NODE_VERSION"
                return 0
            fi
        fi

        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 18 (LTS)..."
        brew install node@18

        # –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Node.js
        brew link --overwrite node@18

        print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew"
    else
        print_error "Homebrew –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js"
        exit 1
    fi
}

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
install_nodejs_alternative() {
    print_step "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v node &> /dev/null && command -v npm &> /dev/null; then
        NODE_VERSION=$(node --version 2>/dev/null)
        NPM_VERSION=$(npm --version 2>/dev/null)
        if [[ -n "$NODE_VERSION" && -n "$NPM_VERSION" ]]; then
            print_info "Node.js —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $NODE_VERSION"
            return 0
        fi
    fi

    print_warning "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –±–µ–∑ Homebrew..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    TEMP_DIR=$(mktemp -d)
    cd "$TEMP_DIR"

    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ Node.js
    NODE_VERSION="18.19.1"
    ARCH=$(uname -m)

    if [[ "$ARCH" == "arm64" ]]; then
        NODE_ARCH="arm64"
    else
        NODE_ARCH="x64"
    fi

    print_info "–ó–∞–≥—Ä—É–∑–∫–∞ Node.js $NODE_VERSION –¥–ª—è $NODE_ARCH..."

    if curl -fsSL -o "node-$NODE_VERSION-darwin-$NODE_ARCH.tar.gz" "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-darwin-$NODE_ARCH.tar.gz"; then
        print_info "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ Node.js..."
        sudo mkdir -p /usr/local/lib/nodejs
        sudo tar -xf "node-$NODE_VERSION-darwin-$NODE_ARCH.tar.gz" -C /usr/local/lib/nodejs

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
        sudo ln -sf /usr/local/lib/nodejs/node-v$NODE_VERSION-darwin-$NODE_ARCH/bin/node /usr/local/bin/node
        sudo ln -sf /usr/local/lib/nodejs/node-v$NODE_VERSION-darwin-$NODE_ARCH/bin/npm /usr/local/bin/npm
        sudo ln -sf /usr/local/lib/nodejs/node-v$NODE_VERSION-darwin-$NODE_ARCH/bin/npx /usr/local/bin/npx

        print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Node.js"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –≤—Ä—É—á–Ω—É—é: https://nodejs.org/"
        exit 1
    fi

    # –û—á–∏—Å—Ç–∫–∞
    cd - > /dev/null
    rm -rf "$TEMP_DIR"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
install_nodejs() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js..."

    # –ü–æ–ø—ã—Ç–∫–∞ 1: –ß–µ—Ä–µ–∑ Homebrew
    if command -v brew &> /dev/null; then
        install_nodejs_homebrew
    else
        # –ü–æ–ø—ã—Ç–∫–∞ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        install_nodejs_alternative
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v node &> /dev/null && command -v npm &> /dev/null; then
        print_success "Node.js –≤–µ—Ä—Å–∏—è: $(node --version)"
        print_success "NPM –≤–µ—Ä—Å–∏—è: $(npm --version)"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ npm –¥–ª—è Apple Silicon
        if [[ "$CPU_ARCH" == "arm64" ]]; then
            print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ npm –¥–ª—è Apple Silicon..."
            npm config set python python3
            npm config set build-from-source true
        fi
    else
        print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
install_dependencies() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è package.json
    if [ ! -f "package.json" ]; then
        print_error "–§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi

    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è macOS..."

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Apple Silicon
    if [[ "$CPU_ARCH" == "arm64" ]]; then
        print_info "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Apple Silicon..."

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —Ñ–ª–∞–≥–æ–º build-from-source –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        npm install --no-audit --no-fund --timeout=60000

        print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è Apple Silicon"
    else
        npm install --no-audit --no-fund --timeout=60000
        print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
}

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è Apple Silicon
build_native_modules() {
    print_step "–°–±–æ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è Apple Silicon..."

    if [[ "$CPU_ARCH" == "arm64" ]]; then
        print_info "–°–±–æ—Ä–∫–∞ better-sqlite3 –¥–ª—è Apple Silicon..."

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è Apple Silicon
        npm rebuild better-sqlite3 --build-from-source

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
        if npm list better-sqlite3 &> /dev/null; then
            print_success "better-sqlite3 —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –¥–ª—è Apple Silicon"
        else
            print_warning "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–±–æ—Ä–∫–æ–π better-sqlite3"
            print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é: npm rebuild better-sqlite3 --build-from-source"
        fi
    else
        npm rebuild
        print_success "–ù–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–æ–±—Ä–∞–Ω—ã"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup_database() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    mkdir -p data

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    if command -v npm &> /dev/null; then
        npm run db:push
        print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    else
        print_warning "NPM –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    # –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5000): " API_PORT
    API_PORT=${API_PORT:-5000}

    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000): " DEV_PORT
    DEV_PORT=${DEV_PORT:-3000}

    read -p "–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç –¥–ª—è —Å–µ—Å—Å–∏–π (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): " SESSION_SECRET
    if [ -z "$SESSION_SECRET" ]; then
        if command -v openssl &> /dev/null; then
            SESSION_SECRET=$(openssl rand -hex 32)
        else
            SESSION_SECRET="macos-secret-$(date +%s)"
        fi
        print_info "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ–∫—Ä–µ—Ç —Å–µ—Å—Å–∏–∏: $SESSION_SECRET"
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    cat > .env << EOF
NODE_ENV=production
PORT=$API_PORT
SESSION_SECRET=$SESSION_SECRET
DATABASE_URL=./data/kanbe.db
DEV_PORT=$DEV_PORT
PLATFORM=macos
CPU_ARCH=$CPU_ARCH
BUILD_DATE=$(date)
MACOS_VERSION=$(sw_vers -productVersion 2>/dev/null || echo "unknown")
EOF

    print_success "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build_application() {
    print_step "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."

    if command -v npm &> /dev/null; then
        npm run build
        print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ"
    else
        print_warning "NPM –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main() {
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    detect_macos

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Xcode Command Line Tools
    install_xcode_tools

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Homebrew
    install_homebrew

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
    install_nodejs

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies

    # –°–±–æ—Ä–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    build_native_modules

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    setup_database

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    create_config

    # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    build_application

    print_footer

    echo ""
    echo -e "${CYAN}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ:${NC}"
    echo "   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: macOS"
    echo "   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $CPU_ARCH"
    echo "   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    echo ""
    echo -e "${GREEN}üöÄ KanBe –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –Ω–∞ macOS!${NC}"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:"
    echo "  –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: npm run dev (API) + npm run dev:client (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)"
    echo "  –ü—Ä–æ–¥–∞–∫—à–Ω: npm run start"
    echo ""
    echo "–ü–æ—Ä—Ç—ã:"
    echo "  API: $API_PORT"
    echo "  –§—Ä–æ–Ω—Ç–µ–Ω–¥: $DEV_PORT"
    echo ""
    echo -e "${YELLOW}üí° –î–ª—è Apple Silicon:${NC}"
    echo "  –í—Å–µ –Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–æ–±—Ä–∞–Ω—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è ARM64"
    echo "  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Terminal –∏–ª–∏ iTerm2 –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
