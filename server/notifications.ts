import nodemailer from 'nodemailer';
import type { Task, User } from '@shared/schema';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const createTransporter = () => {
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ethereal.email (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π SMTP)
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π SMTP —Å–µ—Ä–≤–µ—Ä
  return nodemailer.createTransport({
    host: 'smtp.ethereal.email',
    port: 587,
    secure: false,
    auth: {
      user: process.env.EMAIL_USER || 'test@example.com',
      pass: process.env.EMAIL_PASS || 'testpass',
    },
  });
};

export class NotificationService {
  private transporter = createTransporter();

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ
  async sendDeadlineReminder(user: User, task: Task, daysLeft: number) {
    try {
      if (!user.email) {
        console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç email –∞–¥—Ä–µ—Å–∞');
        return;
      }

      const subject = `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ ${daysLeft} ${this.getDaysText(daysLeft)}`;
      const html = this.createDeadlineReminderHTML(user, task, daysLeft);

      await this.transporter.sendMail({
        from: '"KanBe" <noreply@kanbe.app>',
        to: user.email,
        subject,
        html,
      });

      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email} –¥–ª—è –∑–∞–¥–∞—á–∏ "${task.title}"`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
  async sendOverdueNotification(user: User, task: Task) {
    try {
      if (!user.email) {
        console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç email –∞–¥—Ä–µ—Å–∞');
        return;
      }

      const subject = '–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!';
      const html = this.createOverdueNotificationHTML(user, task);

      await this.transporter.sendMail({
        from: '"KanBe" <noreply@kanbe.app>',
        to: user.email,
        subject,
        html,
      });

      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email} –¥–ª—è –∑–∞–¥–∞—á–∏ "${task.title}"`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  async sendDailyReport(user: User, stats: {
    completedTasks: number;
    totalTasks: number;
    overdueTasks: number;
    productivity: number;
  }) {
    try {
      if (!user.email) {
        console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç email –∞–¥—Ä–µ—Å–∞');
        return;
      }

      const subject = '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
      const html = this.createDailyReportHTML(user, stats);

      await this.transporter.sendMail({
        from: '"KanBe" <noreply@kanbe.app>',
        to: user.email,
        subject,
        html,
      });

      console.log(`–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    }
  }

  private getDaysText(days: number): string {
    if (days === 1) return '–¥–µ–Ω—å';
    if (days >= 2 && days <= 4) return '–¥–Ω—è';
    return '–¥–Ω–µ–π';
  }

  private createDeadlineReminderHTML(user: User, task: Task, daysLeft: number): string {
    const deadline = task.dueDate ? new Date(task.dueDate * 1000).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω';

    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #f59e0b;">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!</p>

        <div style="background: #fef3c7; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="margin: 0 0 10px 0; color: #92400e;">–ó–∞–¥–∞—á–∞: ${task.title}</h3>
          <p style="margin: 5px 0;"><strong>–î–µ–¥–ª–∞–π–Ω:</strong> ${deadline}</p>
          <p style="margin: 5px 0;"><strong>–û—Å—Ç–∞–ª–æ—Å—å:</strong> ${daysLeft} ${this.getDaysText(daysLeft)}</p>
          ${task.description ? `<p style="margin: 10px 0;"><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${task.description}</p>` : ''}
        </div>

        <p>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É –≤–æ–≤—Ä–µ–º—è!</p>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ KanBe</p>
      </div>
    `;
  }

  private createOverdueNotificationHTML(user: User, task: Task): string {
    const deadline = task.dueDate ? new Date(task.dueDate * 1000).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω';

    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #dc2626;">–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!</p>

        <div style="background: #fecaca; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="margin: 0 0 10px 0; color: #991b1b;">–ó–∞–¥–∞—á–∞: ${task.title}</h3>
          <p style="margin: 5px 0;"><strong>–î–µ–¥–ª–∞–π–Ω –±—ã–ª:</strong> ${deadline}</p>
          ${task.description ? `<p style="margin: 10px 0;"><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${task.description}</p>` : ''}
        </div>

        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.</p>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ KanBe</p>
      </div>
    `;
  }

  private createDailyReportHTML(user: User, stats: any): string {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #3b82f6;">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!</p>

        <div style="background: #eff6ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="margin: 0 0 15px 0; color: #1e40af;">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</h3>
          <ul style="list-style: none; padding: 0;">
            <li style="margin: 8px 0;">‚úÖ <strong>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</strong> ${stats.completedTasks}</li>
            <li style="margin: 8px 0;">üìã <strong>–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</strong> ${stats.totalTasks}</li>
            <li style="margin: 8px 0;">‚ö†Ô∏è <strong>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:</strong> ${stats.overdueTasks}</li>
            <li style="margin: 8px 0;">üìä <strong>–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> ${stats.productivity}%</li>
          </ul>
        </div>

        <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</p>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ KanBe</p>
      </div>
    `;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const notificationService = new NotificationService();
